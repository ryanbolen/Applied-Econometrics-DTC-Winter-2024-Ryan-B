---
author: "Ryan Bolen"
title: "Clean Data"
format: 
  docx: 
    echo: true
    message: false
editor: visual
---

## Libraries

In the following code chunk, load all the libraries you will need:

```{r}
library(tidyverse)
library(fixest)
library(rio)
library(lubridate)
library(ggplot2)
library(scales)

```

**Research Question:**

The College Scorecard was released at the start of September 2015. **Among colleges that predominantly grant bachelor\'s degrees**, did the release of the Scorecard shift student interest to high-earnings colleges relative to low-earnings ones (as proxied by Google searches for keywords associated with those colleges)? 

**Data:** 

	Data for this project was pulled from Google Trends which measures the number of internet searches made for a particular school and the College Scorecard where different variables related to enrollment, post graduate earnings, cost of attendance etc. are available for download and analysis.  

```{r}
# Getting all trends up to files in a list to pass to import/merge.

trends_up_to_list <- list.files(pattern = 'trends_up_to_')

```

```{r}
# Import all trends_up_to files and bind them into a data frame

trends_up_to <- import_list(trends_up_to_list,rbind = TRUE, fill = TRUE)
```

```{r}
# Get the first ten characters out of the month or week column which at the moment is a string. 

# Change the date string to an actual date and then floor it to the first day of the month.

trends_up_to <- trends_up_to %>% 
  mutate(monthorweek2 = str_sub(monthorweek,end = 10)) %>% 
  mutate(monthorweek2 = ymd(monthorweek2)) %>% 
  mutate(first_day_of_month = floor_date(monthorweek2,unit= 'month'))

```

```{r}

# Standardize the index variable by school name

trends_up_to <- trends_up_to %>% group_by(schname,keyword) %>% mutate(std_key = (index -mean(index,na.rm = TRUE))/sd(index,na.rm = TRUE))
```

```{r}

# Summarize to school name and month level

trends_up_to <- trends_up_to %>% group_by(first_day_of_month,schname) %>% summarize(standardized_searches = sum(std_key))
```

```{r}

# Read in the scorecard data

SC <- import('Most+Recent+Cohorts+(Scorecard+Elements).csv')

# Read in the id name link data

id_name_link <- import('id_name_link.csv')
```

```{r}
# count how many times each school name pops up in id_name_link filter out any rows where n > 1

id_name_link <- id_name_link %>% group_by(schname) %>% mutate(n = n()) %>% filter(n == 1)

```

```{r}
# Merge data sets - inner join trends up to (D2) on id_name_link that we summarised.

trends_up_to <- trends_up_to %>% inner_join(id_name_link, join_by(schname)) 

SC <- SC %>% mutate(opeid = OPEID)

clean_data <- trends_up_to %>% inner_join(SC, join_by(opeid))


```

```{r}
# Need to look at data before September 2015 (before card was released) and after September 2015 (after it was released)

# Vars that might be good to control for:

# Admission Rate 'ADM_RATE'
# Percentage of students who are financially independent 'DEP_STAT_PCT_IND' - CANNNOT FIND
# Dependent Variable of choice - CANNOT FIND
# Mean earnings of students working and not enrolled 10 years after entry 'mn_earn_wne_p10'
# Graduation rate (on time is considered 6 years) - C150_4_POOLED_SUPP-REPORTED-GRAD-RATE
# Annual cost of going (average) - NPT4_PUB-AVERAGE-ANNUAL-COST

# a one-unit change in the standardized index can be understood and interpreted as a one-standard-deviation change in search interest



```

A

```{r}

# Getting frame with only colleges that grant bachelor's degrees using PREDDEG variable equal to 3

bach_degree_school_data <- clean_data

bach_degree_school_data <- clean_data %>% filter(PREDDEG == 3)

bach_degree_school_data <- bach_degree_school_data %>% select(first_day_of_month,`md_earn_wne_p10-REPORTED-EARNINGS`,schname,standardized_searches,unitid,opeid,PREDDEG,`C150_4_POOLED_SUPP-REPORTED-GRAD-RATE`,`NPT4_PUB-AVERAGE-ANNUAL-COST`)

bach_degree_school_data <- bach_degree_school_data %>% mutate(mnth = month(first_day_of_month))

# Filter to only get schools where med earnings is reported

bach_degree_school_data <- bach_degree_school_data %>% filter(`md_earn_wne_p10-REPORTED-EARNINGS` != 'PrivacySuppressed')

bach_degree_school_data <- bach_degree_school_data %>% filter(`md_earn_wne_p10-REPORTED-EARNINGS` != 'NULL')

# Detirmining how the median earnings values are distributed. 

quantile(bach_degree_school_data$earnings,type= 9)

# Variable for high earnings and low earnings school - used 75K (might change to 75th percentile)

median_earnings <- 50000

# Changing earnings and cost of attendance to numeric

bach_degree_school_data <- bach_degree_school_data %>% mutate(earnings = as.numeric(`md_earn_wne_p10-REPORTED-EARNINGS`))


bach_degree_school_data <- bach_degree_school_data %>% mutate(avg_cost = as.numeric(`NPT4_PUB-AVERAGE-ANNUAL-COST`))

# Creating a var to call out high and low earnings schools

bach_degree_school_data <- bach_degree_school_data %>% mutate(high_earnings_school = earnings >= median_earnings)

```

A

```{r}
# Creating a var for before and after scorecard (first day of month greater or equal to september 2015)

bach_degree_school_data <- bach_degree_school_data %>% mutate(after_sc = ymd(first_day_of_month) >= ymd('2015-09-01'))





```

A

```{r}

# simple model aimed at characterizing the effect of the college scorecard in general:
model1 <- feols(standardized_searches ~ after_sc + high_earnings_school, data = bach_degree_school_data)

# model with interaction term to capture the change in interest of high earnings colleges that occurred relative to low earnings colleges after the scorecard was introduced.

model2 <- feols(standardized_searches ~ after_sc + high_earnings_school + after_sc * high_earnings_school, data = bach_degree_school_data)

etable(model1)
etable(model2)
```

```{r}
# Creating a data frame to visualize aggregated search trends on a monthly basis. 

monthly_searches <- bach_degree_school_data %>% group_by(first_day_of_month,high_earnings_school) %>% summarize(search_movement = mean(standardized_searches,na.rm = TRUE))

# Plotting search trends for high earnings vs. low earnings schools on a monthly basis.

ggplot(data = monthly_searches) + 
  geom_point(mapping = aes(x = first_day_of_month, y = search_movement,color = high_earnings_school))

```

```{r}
# Distribution of earnings amongst all schools in data set.

ggplot(data = bach_degree_school_data, mapping = aes(x = earnings)) + 
  geom_histogram(bins = 100)+
  labs(title = "Distribution of Median Earnings")
```

```{r}
# Searches by month

ggplot(data = bach_degree_school_data, mapping = aes(x = earnings,y = avg_cost)) + 
  geom_point() + 
  labs(title = "Average Earnings vs. Average Cost") + xlim(0,120000)


```
